<template 
 slot="*head"
 :title="^title|MetaStatic"
 :cssurl="^cssurl|https://startbootstrap.github.io/startbootstrap-sb-admin/css/styles.css"
 :faurl="^faurl|https://use.fontawesome.com/releases/v6.4.2/js/all.js"
 :bsurl="^brurl|https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
 :topbarcolor="^topbarcolor|#bdddf6"
 :topbartextcolor="^topbartextcolor"
 :topbaropacity="^topbaropacity|0.9"
 :menubgcolor="^menubgcolor|#fff"
 :menutextcolor="^menutextcolor|#212832"
 :contentbgcolor="^contentbgcolor|#f2f6fc"
 :contenttextcolor="^contenttextcolor|#69707a"
 :footerbgcolor="^footerbgcolor|rgb(242, 246, 252)"
 :footertextcolor="^footertextcolor|#69707a"
 :topbargradient="^topbargradient"
 :menuwidth="^menuwidth|225px"
 >
  <meta charset="utf-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />
  <title>:title</title>
  <link rel="stylesheet" href=":cssurl">
  <script async src=":faurl" crossorigin="anonymous"></script>
  <script async src=":bsurl"></script>
  <style>
.navbar-nav-scroll {
  max-height: var(--bs-scroll-height, 100dvh);
  overflow-y: auto;
}
.bg-mgw {
  opacity: :topbaropacity;
  background-color: :topbarcolor;
  background-image: :topbargradient;
  color: :topbartextcolor;
}
.sidenav-light {
    background-color: :menubgcolor;
    color: :menutextcolor;
}
body {
  background-color: :contentbgcolor;
  color: :contenttextcolor;
  padding-bottom: env(safe-area-inset-bottom);
}
pre code {
  font-size: 0.7rem;
}
.bg-light {
  background-color: :footerbgcolor !important;
  color: :footertextcolor;
}

.shadow-right {
    box-shadow: .15rem 0 1.75rem 0 rgba(33,40,50,0.15)!important;
}

.sb-nav-fixed #layoutSidenav #layoutSidenav_nav {
  width: :menuwidth;
}

.sb-nav-fixed #layoutSidenav #layoutSidenav_content {
    padding-left: :menuwidth;
}

#layoutSidenav #layoutSidenav_nav {
  flex-basis: :menuwidth;
  flex-shrink: 0;
  transition: transform 0.15s ease-in-out;
  z-index: 1038;
  transform: translateX(-:menuwidth);
}

#layoutSidenav #layoutSidenav_content {
  position: relative;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  min-width: 0;
  flex-grow: 1;
  min-height: calc(100vh - 56px);
  margin-left: -:menuwidth;
}

.carousel-control-prev {
  top: 100px;
  align-items: start;
  width: 5%;
}

.carousel-control-next {
  top: 100px;
  align-items: start;
  width: 5%;
}

.sb-sidenav .sb-sidenav-menu .nav .sb-sidenav-menu-heading {
    padding-top: 0.5rem;
    padding-bottom: 0rem;
    font-size: var(--bs-nav-link-font-size);
    text-transform: none;
}


.ms-search-icon {
  position: absolute;
  left: 65%;
  z-index: 2;
}

.ms-search-field {
  width: 300px;
  position: absolute;
  left: 40%;
  z-index: 2;
}

.ms-search-dropdown {
  position: absolute; 
  left: -300px; 
  top: 48px;
  overflow-y: scroll;
  max-height: 350px;
}

  .ms-search-sub-dropdown {
    position: absolute; 
    left: -500px; 
    top: 0px;
    overflow-y: scroll;
    max-height: 350px;
  }

  .ms-small-text {
    font-size: 0.6rem;
    margin: 0px;
  }

  .ms-heading-text {
    font-size: 0.75rem;
    margin: 0px;
  }

@media (max-width: 576px) {
  .ms-search-icon {
    position: absolute;
    left: 85%;
    z-index: 2;
  }

  .ms-search-field {
    width: 200px;
    position: absolute;
    left: 40%;
    z-index: 2;
  }

  .ms-search-dropdown {
    position: absolute; 
    left: -200px; 
    top: 40px;
    overflow-y: scroll;
    max-height: 350px;
  }

  .ms-search-sub-dropdown {
    position: absolute; 
    left: -300px; 
    top: 30px;
    overflow-y: scroll;
    max-height: 350px;
  }
}

@media (min-width: 577px) and (max-width: 992px) {
  .ms-search-icon {
    position: absolute;
    left: 50%;
    z-index: 2;
  }

  .ms-search-field {
    width: 200px;
    position: absolute;
    left: 24%;
    z-index: 2;
  }

  .ms-search-dropdown {
    position: absolute;
    left: -200px;
    top: 40px;
    overflow-y: scroll;
    max-height: 350px;
  }

  .ms-search-sub-dropdown {
    position: absolute; 
    left: -200px; 
    top: 0px;
    overflow-y: scroll;
    max-height: 350px;
  }

}

@media (min-width: 992px) {
  #layoutSidenav #layoutSidenav_nav {
    transform: translateX(0);
  }
  #layoutSidenav #layoutSidenav_content {
    margin-left: 0;
    transition: margin 0.15s ease-in-out;
  }
  .sb-sidenav-toggled #layoutSidenav #layoutSidenav_nav {
    transform: translateX(-:menuwidth);
  }
  .sb-sidenav-toggled #layoutSidenav #layoutSidenav_content {
    margin-left: -:menuwidth;
  }
  .sb-sidenav-toggled #layoutSidenav #layoutSidenav_content:before {
    display: none;
  }  
}

  </style>
</template>

<template slot="*body">
  <span onload="loadByHash()">
    <slot name="topbar" />
  </span>

  <div id="layoutSidenav">
    <div id="layoutSidenav_nav">
      <nav class="sb-sidenav shadow-right accordion sb-sidenav-light navbar-nav-scroll" id="sidenavAccordion">
        <slot name="sidebar" />
      </nav>
    </div>
    <div id="layoutSidenav_content">
      <main>
        <div class="container-fluid px-4">
          <slot name="content" />
        </div>
      </main>
      <footer class="py-4 bg-light mt-auto">
        <div class="container-fluid px-4">
          <slot name="footer" />
        </div>
      </footer>
    </div>
  </div>
</template>

<script type="build">
document.body.classList.add('sb-nav-fixed');
let index = '{}';
if (MetaStatic.indexContent) {
  index = JSON.stringify(MetaStatic.wordToFileIndex);
}
scriptEl.textContent += `
  function getWordIndex() {
    return ${index};
  }
`;
</script>

<script>

let ms_handlers = {};
let wordIndex;

function addHandler(id, type, fn) {
  if (!ms_handlers[id]) {
    ms_handlers[id] = [];
  }
  ms_handlers[id].push({
    fn: fn,
    type: type
  });
  let ptrn = '[ms-el-id="' + id + '"]';
  document.querySelector(ptrn).addEventListener(type, fn);
}

function addElementHandler(element, type, fn) {
  let id = element.getAttribute('ms-el-id');
  if (id && id !== '') {
    if (!ms_handlers[id]) {
      ms_handlers[id] = [];
    }
    ms_handlers[id].push({
      fn: fn,
      type: type
    });
    element.addEventListener(type, fn);
  }
}

function removeHandler(id, type) {
  if (ms_handlers[id]) {
    for (let ix = 0; ix < ms_handlers[id].length; ix++) {
      let h = ms_handlers[id][ix];
      if (h.type === type) {
        let ptrn = '[ms-el-id="' + id + '"]';
        document.querySelector(ptrn).removeEventListener(type, h.fn);
        ms_handlers[id].splice(ix, 1);
      }
    }
  }
}

function removeHandlers(element) {
  let id = element.getAttribute('ms-el-id');
  if (id && id!=='' && ms_handlers[id]) {
    for (let h of ms_handlers[id]) {
      element.removeEventListener(h.type, h.fn);
    }
    delete ms_handlers[id];
  }
}

function removeHandlersFromChildren(element) {
  let els = element.querySelectorAll('[ms-el-id]');
  for (let el of els) {
    removeHandlers(el);
  }
}

function stringToId(string) {
  if (string.startsWith('#')) string = string.slice(1);
  string = string.replaceAll("'", '');
  string = string.replace(/\W/g, '-').toLowerCase();
  return string.replaceAll('--', '-');
}

function displayContent(filename, elType, itemEl) {
  if (itemEl) {
    let contentPageEl = itemEl.closest('.content-page');
    if (contentPageEl) {
      let id = contentPageEl.id.split('content-page-')[1];
      if (id) {
        let aTag = document.getElementById('menu-item-' + id);
        if (aTag) aTag.click();

        if (elType === 'carousel') {
          let itemNo = itemEl.getAttribute('ms-index');
          if (itemNo >= 0) {
            let carouselEl = contentPageEl.querySelector('div.carousel');
            if (carouselEl) {
              const carousel = new bootstrap.Carousel(carouselEl, {})
              carousel.to(itemNo);
            }
          }
        }
        if (elType === 'card') {
          let tabEl = itemEl.closest('.tab-pane');
          if (tabEl) {
            let id = tabEl.id.split('sbadmin-tab-content-')[1];
            if (id) {
              let btn = document.querySelector('button#sbadmin-tab-' + id );
              if (btn) btn.click();
            }
          }
        }
        if (elType === 'tab') {
          let tabId = itemEl.id.split('sbadmin-tab-content-')[1];
          if (tabId) {
            let btn = document.querySelector('button#sbadmin-tab-' + tabId );
            if (btn) btn.click();
          }
        }
      }
    }
  }
}

function getContentValues(filename) {
  let title;
  let heading;
  let elType;
  let ptrn = 'ms-file="' + filename + '"';
  let itemEl = document.querySelector('[' + ptrn + ']');
  if (itemEl) {
    if (itemEl.classList.contains('card')) elType = 'card';
    if (itemEl.classList.contains('carousel-item')) elType = 'carousel';
    if (itemEl.classList.contains('tab-pane')) elType = 'tab';
    let contentPageEl = itemEl.closest('.content-page');
    if (contentPageEl) {
      let id = contentPageEl.id.split('content-page-')[1];
      let aTag = document.getElementById('menu-item-' + id);
      title = aTag.querySelector('span').textContent;

      if (elType === 'carousel' || elType === 'card') {
        heading = itemEl.querySelector('h5').textContent;
      }
      if (elType === 'tab') {
        id = itemEl.id.split('sbadmin-tab-content-')[1];
        let btn = document.querySelector('button#sbadmin-tab-' + id );
        heading = btn.textContent;
      }
    }
  }
  return {
    title: title,
    heading: heading,
    elType: elType,
    itemEl: itemEl
  }
}

function loadByHash() {
  wordIndex = getWordIndex();
  let hash = window.location.hash;
  let carouselItemNo;
  if (hash.includes(':')) {
    let pcs = hash.split(':');
    carouselItemNo = pcs.pop();
    hash = pcs.join(':');
  }

  hash = stringToId(hash);
  if (hash && hash !== '') {
    let ptrn = "a[ms-id='" + hash + "']";
    let el = document.querySelector(ptrn);
    if (el) {
      let id = el.id.split('menu-item-')[1];
      let divTags = document.getElementsByClassName('content-page');
      for (let divTag of divTags) {
        divTag.classList.remove('show');
      }
      let cpEl = document.getElementById('content-page-' + id);
      cpEl.classList.add('show');
      if (carouselItemNo && +carouselItemNo > 0) {
        let carouselEl = cpEl.querySelector('div.carousel');
        if (carouselEl) {
          const carousel = bootstrap.Carousel.getInstance(carouselEl);
          carousel.to(carouselItemNo);
        }
      }
    }
  }
}
</script>
